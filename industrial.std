//   @fjpolo

//
// Samples
//
samples('github:fjpolo/fjpolo-Strudel')
samples('github:algorave-dave/samples')
samples('github:tidalcycles/dirt-samples')
samples('github:switchangel/breaks')
samples('github:switchangel/pad')

//
// Degrade (~Enable)
//
const kick_en = slider(1, 0, 1, 1)
const flat_kick_en = slider(1, 0, 1, 1)
const rumble_en = slider(1, 0, 1, 1)
const rev_sweep_en = slider(1, 0, 1, 1)
const sd_en = slider(1, 0, 1, 1)
const hh_en = slider(1, 0, 1, 1)
const clap_en = slider(1, 0, 1, 1)
const deepbass_en = slider(1, 0, 1, 1)
const melody_en = slider(1, 0, 1, 1)
const fg_en = slider(1, 0, 1, 1)
const inf_en = slider(1, 0, 1, 1)
const arpeggio_en = slider(1, 0, 1, 1)
const machines_en = slider(1, 0, 1, 1)
const drone01_en = slider(1, 0, 1, 1)
const robot_en = slider(1, 0, 1, 1)
const anvil_en = slider(1, 0, 1, 1)
const anvilx2_en = slider(1, 0, 1, 1)
const metal_grinder_en = slider(1, 0, 1, 1)
const metal_grinder_full_en = slider(1, 0, 1, 1)
const telegraph_en = slider(1, 0, 1, 1)
const thunder_en = slider(1, 0, 1, 1)
const sine_en = slider(1, 0, 1, 1)
const reversed_reverb_en = slider(1, 0, 1, 1)
const sample_reversed_reverb_en = slider(1, 0, 1, 1)

//
// Sliders
//

// BPM
const BPM_SLIDER = slider(152, 140, 172, 1)
// DRUM MACHINE
const DRUM_MACHINE_IX = slider(0,0,9,1)
// BASS TYPE
const BASS_TYPE_IX = slider(7,0,9,1)
// KICK-BASS BEAT
const KICK_BASS_BEAT_IX = slider(0, 0, 3, 1)
// RUMBLE
const RUMBLE_DISTORTION_SLIDER = slider(0, 0, 10.0, .5)
// SNARE BEAT
const SNARE_BEAT_IX = slider(1, 0, 3, 1)
// BASS DISTORTIO
const BASS_DISTORTION = slider(3, 0, 11, .5)
// BASS LPF
const BASS_LPF = slider(150, 0, 1000, 5)
// BASS ENVELOPE
const BASS_ENVELOPE = slider(2,0,8, 0.5)
const BASS_LPQ = slider(9,0,20, 0.5)
// BASS REVERB
const BASS_REVERB = slider(1, 0, 10, .1)
const BASS_REVERB_ROOM_SIZE = slider(11, 0, 15, .5)
// INFINITE RISER DISTORTION
const RISER_DISTORTION = slider(3, 0, 11, .5)

// 
// KICK-BASS structures
//
const drum_machine_structure = [
 "rolandtr909",
 "emusp12",
 "simmonssds5",
 "linndrum",
 "rolandtr808",
 "sequentialcircuitstom",
 "oberheimdmx",
 "alesissr16",
 "rolandtr606",
 "xdrumlm8953"
]
const bass_type_structure = [
  "808",
  "industrial",
  "moog",
  "fm",
  "dist",
  "sid",
  "juno",
  "subroc3d",
  "sequential",
  "glitch"
]
const kick_structures = [
  "[x!4]",
  "<[x!4] [x!3 [x!2]]>",
  "<[x!4] [x!3 [x [x!2]]]>",
  "[x!2]!4"
]
const bass_structures = [
  "[f0!2 e0!2]", 
  "<[f0!2 e0!2] [f0!2 e0 [e0!2]]>",
  "<[f0!2 e0!2] [f0!2 e0 [e0 [e0!2]]]>",
  "<[[f0!2]!2 [e0!2]!2]>"
]

//
// Set tempo
//
setCps(160/60/4)

//
// Set key
//
let bg_key = "e:phrygian"


/*************************************************************************/


//
// Kick
//
KICK:
// -- Kick --
s("bd").struct(pick(kick_structures, KICK_BASS_BEAT_IX))
.degradeBy(kick_en)
// .bank("RolandTR808")
// .sometimesBy(0.15, ply(2))
.gain("<1.2 0.8 1.1 0.9>").every(2, x=>x.add(0.2))
.speed(1)
.orbit(0)
.distort("2, .7")
// .duck("2:3:4").duckattack(.5).duckdepth(1.8)
// .duck(4).duckattack(.2).duckdepth(.2)
//._punchcard()
// .gain(kick_en * mouseX.range(0, 1))

FLAT_KICK:
// -- Kick --
s("bd").struct(pick(kick_structures, KICK_BASS_BEAT_IX))
.degradeBy(flat_kick_en)
.gain("<1.2 0.8 1.1 0.9>").every(2, x=>x.add(0.2))
// .bank("RolandTR909, bossdr220, korgt3")
.bank(pick(drum_machine_structure, DRUM_MACHINE_IX))
.speed(1)
.orbit(0)
.lpf(500)
.hpf(120)
.gain(9)
.postgain(10)
.distort(3)
.room(1.1)

//
//Reverse-reverb kick pattern
//
REVERSE_SWEEP:
  stack(
    // 1. A delayed, long reverb on the kick sound.
    s("~ ~ sbd ~")
      .room(1).roomsize(10) // Long reverb effect
      .gain(0.6) // Volume control for the reverb tail
      .lpf(
        // 2. The filter sweep that creates the "swell"
        n(
          // Use slow to make the sweep last over a few cycles
          slow(4, (i, p) => p.range(100, 3000))
        )
      )
  )
.degradeBy(rev_sweep_en)
.orbit(10)

//
//Rumble
//
RUMBLE:
stack(
  // -- Rumble - Low
  s("[bd!4]")
    .lpf(200)
    .distort(1.0)
  ,
  // -- Rumble - Low
  s("[bd!4]")
    .distort(RUMBLE_DISTORTION_SLIDER)
    // .distort(mouseX.range(0, 10))
    .hpf(1200)
)
.degradeBy(rumble_en)
.orbit(1)
.delay(5)
.room(5)
.bank("RolandTR909")
//._scope({width: 300})
// .gain(rumble_en * mouseX.range(0, .25))

//
// Snare
//
const snare_structures = [
                           "{x!4*4}",
                           "<[~ ~ ~ [~ ~ x ]]> <[~ x ~ x x ~ x ~ x ~ ~]>",
                           "{x ~!6  x ~ ~ x ~!3 x ~}%16",
                           "{~}"
                         ]
SNARE:
stack(
  s("sd").struct(pick(snare_structures, SNARE_BEAT_IX))
  .bank("RolandTR909")
)
.degradeBy(sd_en)
.slow(1.5)
.orbit(2)
.distort(2).room(2)
//._punchcard()

//
// Hihat
//
HIHAT:
  stack(
  // -- Hihat
  stack(
    // -- Uphat
    s("[~ hh]!4")
    .sometimesBy(.1, ply(2))
    ,
    // -- Rolling hihat
    s("[hh]").struct("x*8")
  )
  .orbit(3)
)
.bank("RolandTR909")
.degradeBy(hh_en)
.distort(2.5)
//.delay(2)

//
// CLAP
//
CLAP:
stack(
  s("clap").struct("[x ~ ~ ~]")
  .distort(5)
  // .room(2).roomsize(5)
)
.degradeBy(clap_en)

//
// Hit that Bass
//
DEEPBASS:
stack(
  note(pick(bass_structures, KICK_BASS_BEAT_IX))

      .distort(BASS_DISTORTION)
      .s(pick(bass_type_structure, BASS_TYPE_IX))
        .lpf(BASS_LPF)
        .lpenv(BASS_ENVELOPE)
        // .lpenv(mouseX.segment(4).range(0, 12))
        .lpq(BASS_LPQ)
        .orbit(4)
        .room(BASS_REVERB)
        .roomsize(BASS_REVERB_ROOM_SIZE)
)
//.duck(0).duckattack(.5).duckdepth(.5)
.degradeBy(deepbass_en)
.gain("<1.2 0.8 1.1 0.9>").every(2, x=>x.add(0.2))
.loop(1)
//._punchcard()

//
// Melody
//
MELODY: 
stack(
  n(
    irand(16)
      //.add(7)
      .seg(16)
      //.add("0, .1, 3, 5, 9")
      //.sometimesBy(.15, x=>x.add("0, 3"))
   )
      .scale(bg_key)
      .rib(8,1)
      .s("sawtooth")
      .lpenv(3)
)
.degradeBy(melody_en)
//.sometimesBy(0.12, x=>x.rev())
//.sometimesBy(.15, x=>"~")
//.sometimesBy(.05, x=>x.add("1"))
//.sometimesBy(.1, x=>x.palindrome())
.loop(1)
.slow(1)
.postgain(5)
.room(2)
//._punchcard({width: 600})

//
// Sine
//
SINE:
stack(
  n("24")
      .scale(bg_key)
      .adsr("10:10:1:10")
      .fm(time).fmh(time)
)
.degradeBy(sine_en)
.loop(1)
.slow(1)

//
// Fog Horn
//
FOGHORN:
stack(
    s("supersaw")
    .detune(4)
    .rel(9)
    .beat(2, 32)
    .slow(2)
    .fm(1.5).fmh(.2)
)
.gain(2)
.degradeBy(fg_en)
//.gain(fg_en * mouseX.range(0, 1.5))

//
// Infinite Riser
//
INFINITE_RISER:
stack(
  s("pulse")
    .orbit(4)
    .seg(16)
    .dec(0.1)
    .fm(time).fmh(time)
)
.degradeBy(inf_en)
.distort(RISER_DISTORTION)
// .gain(inf_en * mouseX.range(0, 1.2))

//
// Arpeggio
//
ARPEGGIO:
stack(
  //n("[1 3 5 7] [2 4 6 8] [4 6 8 10]")
  n("[1 3 5 7] [2 4 6 8]")
  // n("[1 3 5 3] [2 4 6 4]")
  //.slow(2)
    .scale(bg_key)
    .s("triangle")
)
.degradeBy(arpeggio_en)
.loop(1)
// ._punchcard({width: 600})

//
// Machines
//
MACHINES:
stack(
  // A fast, repetitive rhythm with a glitch
  s("bd hh sn hh!8")
    .sometimes(
      // A rapid-fire repeating glitch
      ply(4)
    )
  .distort(3)
  // .gain(machines_en * mouseX.range(0, 1.0))
,

  // A slowly growing bassy feeling
  s("supersaw")
    .slow(1)
    // .lpf(n(slow(16, (i,p) => p.range(100, 4000))))
    // .lpf(mouseX.range(0, 4000))
    // .lpf(time)
    .distort(3)
    // .gain(machines_en * mouseY.range(0, 2.0))
  )
.degradeBy(machines_en)
// .gain(machines_en * mouseX.range(0, 1.0))

DRONE01:
// A long, resonant drone
s("supersaw")
  // Sets a long release time in seconds
  .rel(8)
  // Adds a deep, resonant reverb
  .room(1).roomsize(10)
.degradeBy(drone01_en)
// .gain(mouseX.range(0, .6))

ROBOT:
stack(
    // A short FM sound for the initial attack and high-frequency content
    s("sine")
    .gain(.8).fm(8).fmh(0.5).rel(0.01)
    ,

    // A slightly longer FM sound for the metallic ring
    s("sine")
    .fm(12).fmh(0.8).rel(0.2)
)
.degradeBy(robot_en)
// .gain(robot_en * mouseX.range(0, 0.1))
.gain(.1)
.distort(5)
// .lpf(3000)

//
// In the forge
//
HAMMER_ANVIL:
s("anvil:00").struct("[x ~ ~ ~]").rev()
// s("anvil:00").struct("[~ x x x]")
// .sometimesBy(.25, ply(2))
.gain(2)
.degradeBy(anvil_en)
.loop(1)
.room(1.5)

HAMMERx2_ANVIL:
s("anvil:01").fit()
.gain(2)
.loop(1)
.slow(2)
.degradeBy(anvilx2_en)

METAL_GRINDER:
s("metalgrinder:00").struct("[~ x x x]")
.loop(1)
.distort(6)
.degradeBy(metal_grinder_en)
.lpf(5000)
.room(1.5)

METAL_GRINDER_FULL:
s("metalgrinder:00")
.gain(0.05)
.degradeBy(metal_grinder_full_en)
.loop(1)
.distort(6)
.lpf(5000)
.room(1.5).roomsize(5)

//
// Some electric sounds
//
TELEGRAPH_SOS:
note("[[80 80] [80 ~] ~ 80] [80 80 ~ [80 80]] [[80 ~] ~ ~ ~]")
  .s("triangle")
  .scale(bg_key)
  .rel(0.005)
  .slow(4)
  .distort(2)
  .room(1).roomsize(7)
// .gain(telegraph_en*mouseX.range(0, 1))
.degradeBy(telegraph_en)

//
// Reversed reverb
//
REVERSED_REVERB:
stack(
// Creates a long, spacious clap sound
  s("clap").room(10).roomsize(10)
    // The main pattern that reverses the reverb
    .gain(n("<0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.7 0.9 1>").slow(8))
    // A sudden drop in gain to simulate the end of the reverse effect
    .rel(0.01)
)
.degradeBy(reversed_reverb_en)
.distort(1)
.slow(8)

REVERSED_REVERB:
s("reversedclap:00")
.degradeBy(sample_reversed_reverb_en)
.slow(4)
.room(1.5)
.gain(5)

//
// Atmospheric effects
//
// A thunderclap with a long, rumbling decay
THUNDER01:
stack(
  // The initial crack of the thunder
  s("noise").gain(1.2).rel(0.1),

  // The deep, rumbling body of the thunder
  s("noise")
    // Use a low-pass filter to get the deep rumble
    .lpf(60)
    // Create a long decay to simulate the rumble
    .rel(10)
    // Add distortion to make it sound aggressive and gritty
    .distort(3.0, 0.5)
    // A pitch envelope that rises with the gain
    .detune(n("<-0.25 -0.2 -0.15 -0.1 -0.05 0>"))
    // A massive reverb to simulate a long, echoing rumble
    .room(1).roomsize(20)
)
.degradeBy(thunder_en)
.rel(9)
.beat(2, 32)
.slow(8)

/*************************************************************************/

//
// General config
//

// Graphs
all(x => 
  x.postgain(slider(0.17,0,1))
   //._spectrum({width: 600})
   //._punchcard()
   .punchcard()
   //._scope({width: 600})
)

// Effects
all(x=>
  x
  // .lpf(mouseX.segment(4).range(0, 200))
  // .lpf(slider(80, 0, 100, 1).pow(2)).lpenv(0)
  .whenKey("Control:m", x=>x.coarse(8).lpenv(0).color("cyan"))
)
  
// Theme
.theme("bluescreen")